{USING SORTING}
class Solution {
public:
    int missingNumber(vector<int>& nums) {
        sort(begin(nums), end(nums));
        int ans =0;
        int n = nums.size();
        int greater = nums[n - 1] + 1;
        if (n == nums[n - 1])
            greater = nums[n - 1];
        

        for (int i = 0; i <= greater; i++) {
            ans
           
        }
        for (int e : nums) {
            sum -= e;
        }
        return sum;
    }
};






{USING SUM oF ELEMENTS}
class Solution {
public:
    int missingNumber(vector<int>& nums) {
        
        int n = nums.size();
        int Tsum = (n*(n+1))/2;
        return  Tsum - accumulate(nums.begin(),nums.end(),0);
        
    }
}; 








{EFFICENT APPROACH}
class Solution {
public:
    int missingNumber(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int n = nums.size();
        //case 1
        if(nums[0] != 0)return 0;
        //case 2 
        if(nums[n-1] != n)return n;
        for(int i =1;i<nums.size();i++){
            if(nums[i] != i){
            //case 3
            return i;
            }
        }
        return 0;
    }
};







{ USING XOR }
   class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int n = nums.size();
        int ans = 0;
        for(int i=0;i<=n;i++)
        {
            ans^=i;

        }
        for(int e:nums)
        {
            ans^=e;
        }
        return ans;
    }
};

